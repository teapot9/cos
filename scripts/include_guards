#!/usr/bin/env python3

import sys
import re
import traceback
import os.path
import os
import guard

file = sys.argv[1]

is_global, guard = guard.get_guard(file)
sys.stderr.write(f"guard: {guard}\n")

with open(file, 'r') as f:
    lines = f.read().split('\n')

try:
    if not lines[0].startswith('#ifndef '):
        raise ValueError()
    if not lines[1].startswith('#define '):
        raise ValueError()
    if is_global and not lines[2] == '#ifdef __cplusplus':
        raise ValueError()
    if is_global and not lines[3] == 'extern "C" {':
        raise ValueError()
    if is_global and not lines[4] == '#endif':
        raise ValueError()
    if not lines[-2].startswith('#endif'):
        raise ValueError()
    if is_global and not lines[-3].startswith('#endif'):
        raise ValueError()
    if is_global and not lines[-4] == '}':
        raise ValueError()
    if is_global and not lines[-5] == '#ifdef __cplusplus':
        raise ValueError()
except ValueError:
    sys.stderr.write(traceback.format_exc() + '\n')
    sys.exit(f"file {file} does not match header format")

lines[0] = f'#ifndef {guard}'
lines[1] = f'#define {guard}'
if is_global:
    lines[2] = '#ifdef __cplusplus'
    lines[3] = 'extern "C" {'
    lines[4] = '#endif'
lines[-2] = f'#endif // {guard}'
if is_global:
    lines[-3] = '#endif'
    lines[-4] = '} // extern "C"'
    lines[-5] = '#ifdef __cplusplus'

sys.stdout.write('\n'.join(lines))
