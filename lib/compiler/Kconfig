if-success = $(shell,{ $(1); } >/dev/null 2>&1 && echo "$(2)" || echo "$(3)")
success = $(if-success,$(1),y,n)
failure = $(if-success,$(1),n,y)

compiler-info = $(shell,$(SRC_ROOT)/scripts/compiler_info "$(1)" "$(2)")
compiler-name = $(shell,set -- $(1) && echo $1)
compiler-version = $(shell,set -- $(1) && echo $2)

cc-info := $(compiler-info,c,"$(CC)")
cc-name := $(compiler-name,$(cc-info))
cc-version := $(compiler-version,$(cc-info))
cxx-info := $(compiler-info,cxx,"$(CXX)")
cxx-name := $(compiler-name,$(cxx-info))
cxx-version := $(compiler-version,$(cxx-info))

$(error-if,$(failure,test -n "$(cc-name)"),C compiler not found)
$(error-if,$(failure,test -n "$(cxx-name)"),C++ compiler not found)

config CC_NAME_STR
	string
	default $(cc-name)

config CC_VERSION_STR
	string
	default $(cc-version)

config CC_IS_GCC
	def_bool $(success,test "$(cc-name)" = GCC)

config CC_IS_CLANG
        def_bool $(success,test "$(cc-name)" = Clang)

config CXX_NAME_STR
	string
	default $(cxx-name)

config CXX_VERSION_STR
	string
	default $(cxx-version)

config CXX_IS_GCC
        def_bool $(success,test "$(cxx-name)" = GCC)

config CXX_IS_CLANG
        def_bool $(success,test "$(cxx-name)" = Clang)

config UBSAN
	bool "ubsan"
	help
	  Undefined behavior sanitizer.

config UBSAN_IMPLICIT_CONVERSION
	bool "ubsan: implicit conversion"
	depends on UBSAN
	help
	  Enable implicit conversion sanitizer.

config STACK_PROTECTOR
	bool "Stack protector"
	help
	  Enable compiler's stack protectors.

config STACK_USAGE
	bool "Stack usage"
	help
	  Generate *.su files containing stack usage information.

config STACK_USAGE_WARN
	int "Warn on big stack usage"
	default 1024
	depends on STACK_USAGE
	help
	  Warn if stack usage greater than provided value.
