# Environment variables

export COS_VERSION := 0
export COS_KERNEL := cos
export ARCH ?= $(shell uname -m)
export CC ?= cc
export CXX ?= c++
export LD ?= ld
export OBJCOPY ?= objcopy
export STRIP ?= strip
export AR ?= ar
export RANLIB ?= ranlib
export SED ?= sed

include $(BUILD_ROOT)/.config

RELAPATH := $(shell realpath --relative-to=$(SRC_ROOT) .)
SRC := $(abspath $(SRC_ROOT)/$(RELAPATH))
BUILD := $(abspath $(BUILD_ROOT)/$(RELAPATH))
#$(info SRC = $(SRC))
#$(info BUILD = $(BUILD))
ifeq ($(findstring s,$(firstword -$(MAKEFLAGS))),s)
	SILENT=1
else
	SILENT=0
endif

CPPFLAGS += -nostdinc -isystem $(shell $(CC) -print-file-name=include)
CPPFLAGS += -I$(SRC_ROOT)/arch/$(ARCH)/include -I$(SRC_ROOT)/include
BOOT_FLAGS += -mcmodel=small -fPIC -DBOOTLOADER
common-flags += -msse3
common-flags += -mno-red-zone -mabi=sysv
common-flags += -ffreestanding
common-flags += -mcmodel=kernel -fno-pie
common-flags += -Wall -Wextra -Wpedantic
common-flags += -Wtype-limits -Wstrict-prototypes -Wtype-limits
common-flags += -Wframe-larger-than=$(CONFIG_KERNEL_FRAME_SIZE)
CFLAGS += -nostdinc -std=c18
CXXFLAGS += -nostdinc++ -std=c++17
CXXFLAGS += -fno-rtti -fno-exceptions
LDFLAGS += -znodefaultlib -nostdlib -znocombreloc
LDFLAGS += -unresolved-symbols=report-all --orphan-handling=warn
LDFLAGS += --warn-common --warn-alternate-em

ifeq ($(CC), gcc)
	common-flags += -mgeneral-regs-only
endif

ifeq ($(CONFIG_X86_64), y)
	common-flags += -m64
endif
ifeq ($(CONFIG_X86_32), y)
	common-flags += -m32
endif

ifeq ($(CONFIG_DEBUG), y)
	common-flags += -g
endif

ifeq ($(CONFIG_CC_OPTIMIZE_O0), y)
	common-flags += -O0
endif
ifeq ($(CONFIG_CC_OPTIMIZE_O1), y)
	common-flags += -O1
endif
ifeq ($(CONFIG_CC_OPTIMIZE_O2), y)
	common-flags += -O2
endif
ifeq ($(CONFIG_CC_OPTIMIZE_O3), y)
	common-flags += -O3
endif
ifeq ($(CONFIG_CC_OPTIMIZE_OS), y)
	common-flags += -Os
endif

ifeq ($(CONFIG_ASM_DEFAULT_INTEL), y)
	common-flags += -masm=intel
endif
ifeq ($(CONFIG_ASM_DEFAULT_ATT), y)
	common-flags += -masm=att
endif

ifeq ($(CONFIG_STACK_PROTECTOR), y)
	common-flags += -fstack-protector-all -mstack-protector-guard=global
else
	common-flags += -fno-stack-protector
endif

ifeq ($(CONFIG_STACK_USAGE), y)
	common-flags += -fstack-usage
endif

ifeq ($(CONFIG_UBSAN), y)
	common-flags += -fsanitize=undefined
ifeq ($(CONFIG_CC_IS_CLANG), y)
	# disable function sanitizer: requires RTTI
	common-flags += -fno-sanitize=function
endif
endif
ifeq ($(CONFIG_UBSAN_IMPLICIT_CONVERSION), y)
ifeq ($(CONFIG_CC_IS_CLANG), y)
	common-flags += -fsanitize=implicit-conversion
endif
endif

BIN2C = $(SRC_ROOT)/scripts/bin2c

CFLAGS := $(common-flags) $(CFLAGS)
CXXFLAGS := $(common-flags) $(CXXFLAGS)
ASFLAGS := $(common-flags) $(ASFLAGS)
